package com.cir.cirback.controllers;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.cir.cirback.entities.Role;
import com.cir.cirback.entities.User;
import com.cir.cirback.repositories.RoleRepository;
import com.cir.cirback.repositories.UserRepository;

@RestController // This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/api/user") // This means URL's start with /api (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  @Autowired
  private RoleRepository roleRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (
		  @RequestBody User user
      ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	User n = user;

    Set<Role> roles = new HashSet<>();
    Role role_admin = roleRepository.findByRole("administrador").get();
    roles.add(role_admin);
    n.setRoles(roles);
    
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/getall")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
	@GetMapping("/get/{id}")
	public @ResponseBody Optional<User> getUser(@PathVariable(name = "id") int id) {
		return userRepository.findById(id);
	}
  
	@DeleteMapping("/delete/{id}")
	public void deleteUser(@PathVariable(name = "id") int id) {
		userRepository.deleteById(id);
	}
	
	@PutMapping(path="/update/{id}") // Map ONLY PUT Requests
	  public @ResponseBody String modifyUser (
			  @PathVariable(name = "id") int id,
			  @RequestBody User user
	      ) {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request
		
		if (!userRepository.existsById(id)) {
			return "User does not exist";
		}
		
		User n = userRepository.findById(id).get();

		n.setEmail(user.getEmail());
		n.setPassword(user.getPassword());
		n.setName(user.getName());
		n.setSurname(user.getSurname());
		n.setDni(user.getDni());
		
	    //Set<Role> roles = new HashSet<>();
	    //Role role_admin = roleRepository.findByRole("administrador").get();
	    //roles.add(role_admin);
	    //n.setRoles(roles);
	    
	    userRepository.save(n);
	    return "Saved";
	  }
}